generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// USER & AUTHENTICATION MODELS
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  emailVerified Boolean @default(false)
  passwordHash String
  
  // Security fields
  mfaEnabled Boolean @default(false)
  accountLocked Boolean @default(false)
  failedLoginAttempts Int @default(0)
  lastFailedLogin DateTime?
  lockedUntil DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  sessions Session[]
  authAttempts AuthAttempt[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  mfaSecrets MfaSecret[]
  mfaBackupCodes MfaBackupCode[]
  securityLogs SecurityLog[]
  businesses Business[]
  
  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  refreshToken String? @unique
  
  // Device information
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  
  // Session management
  expiresAt DateTime
  lastActivityAt DateTime @default(now())
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model AuthAttempt {
  id        String   @id @default(cuid())
  userId    String?  // Null if user not found
  email     String
  
  // Attempt details
  success   Boolean
  ipAddress String
  userAgent String?
  attemptType String // 'login', 'mfa', 'password_reset'
  failureReason String? // 'invalid_password', 'account_locked', 'invalid_mfa'
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("auth_attempts")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  
  // Token management
  expiresAt DateTime
  usedAt    DateTime?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String   // Email to verify
  
  // Token management
  expiresAt DateTime
  verifiedAt DateTime?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model MfaSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  
  // TOTP secret (encrypted)
  secret    String
  
  // Status
  isActive  Boolean  @default(true)
  verifiedAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("mfa_secrets")
}

model MfaBackupCode {
  id        String   @id @default(cuid())
  userId    String
  
  // Code (hashed)
  code      String
  
  // Status
  usedAt    DateTime?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("mfa_backup_codes")
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?  // Null for system-wide events
  
  // Event details
  action    String   // 'login', 'logout', 'password_change', 'mfa_enabled', etc.
  details   Json?    // Additional context
  ipAddress String
  userAgent String?
  
  // Status
  severity  String   // 'info', 'warning', 'error', 'critical'
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([severity])
  @@index([createdAt])
  @@map("security_logs")
}

// ============================================
// RATE LIMITING
// ============================================

model RateLimit {
  id        String   @id @default(cuid())
  
  // Rate limit key (IP address or user ID)
  key       String
  
  // Endpoint/action being rate limited
  endpoint  String
  
  // Counter
  count     Int      @default(0)
  
  // Window management
  windowStart DateTime @default(now())
  expiresAt DateTime
  
  // Timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([key, endpoint])
  @@index([key])
  @@index([endpoint])
  @@index([expiresAt])
  @@map("rate_limits")
}

// ============================================
// BUSINESS/PROFILE MODELS
// ============================================

enum BusinessCategory {
    SALON
      BARBERSHOP
        SPA
          MASSAGE
            NAILS
              BEAUTY
                FITNESS
                  YOGA
                    PERSONAL_TRAINING
                      THERAPY
                        COUNSELING
                          TUTORING
                            CONSULTING
                              PHOTOGRAPHY
                                VIDEOGRAPHY
                                  EVENT_PLANNING
                                    CATERING
                                      CLEANING
                                        HOME_SERVICES
                                          PET_SERVICES
                                            OTHER
}

model Business {
    id        String   @id @default(cuid())
      ownerId   String
        
          // Basic Information
            name      String
              slug      String   @unique // For onprez.com/[slug]
                category  BusinessCategory
                  description String?  @db.Text
                    tagline   String?
                      
                        // Contact Information
                          email     String?
                            phone     String?
                              website   String?
                                address   String?
                                  city      String?
                                    state     String?
                                      zipCode   String?
                                        country   String?  @default("US")
                                          
                                            // Location
                                              latitude  Float?
                                                longitude Float?
                                                  timezone  String   @default("America/New_York")
                                                    
                                                      // Media
                                                        logoUrl   String?
                                                          coverImageUrl String?
                                                            
                                                              // Social Links (stored as JSON)
                                                                socialLinks Json?  // { instagram, facebook, twitter, linkedin, tiktok }
                                                                  
                                                                    // Settings (stored as JSON)
                                                                      settings  Json?    // Business configuration
                                                                        
                                                                          // Branding (stored as JSON)
                                                                            branding  Json?    // { primaryColor, secondaryColor, accentColor, fontFamily }
                                                                              
                                                                                // Status
                                                                                  isPublished Boolean @default(false)
                                                                                    isPremium   Boolean @default(false)
                                                                                      isActive    Boolean @default(true)
                                                                                        
                                                                                          // SEO
                                                                                            seoTitle       String?
                                                                                              seoDescription String?
                                                                                                seoKeywords    String[]
                                                                                                  
                                                                                                    // Timestamps
                                                                                                      createdAt DateTime @default(now())
                                                                                                        updatedAt DateTime @updatedAt
                                                                                                          publishedAt DateTime?
                                                                                                            
                                                                                                              // Relations
                                                                                                                owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
                                                                                                                  services Service[]
                                                                                                                    appointments Appointment[]
                                                                                                                      customers Customer[]
                                                                                                                        businessHours BusinessHours[]
                                                                                                                          
                                                                                                                            @@index([ownerId])
                                                                                                                              @@index([slug])
                                                                                                                                @@index([category])
                                                                                                                                  @@index([isPublished])
                                                                                                                                    @@index([city, state])
                                                                                                                                      @@map("businesses")
}

model BusinessHours {
    id         String   @id @default(cuid())
      businessId String
        
          // Day of week (0 = Sunday, 6 = Saturday)
            dayOfWeek  Int      // 0-6
              
                // Time slots
                  openTime   String   // "09:00"
                    closeTime  String   // "17:00"
                      
                        // Status
                          isClosed   Boolean  @default(false)
                            
                              // Special notes
                                notes      String?
                                  
                                    // Timestamps
                                      createdAt DateTime @default(now())
                                        updatedAt DateTime @updatedAt
                                          
                                            // Relations
                                              business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
                                                
                                                  @@unique([businessId, dayOfWeek])
                                                    @@index([businessId])
                                                      @@map("business_hours")
}

// ============================================
// SERVICE MODELS (Placeholder - will expand in Milestone 6)
// ============================================

model Service {
    id          String   @id @default(cuid())
      businessId  String
        
          // Basic info (placeholder)
            name        String
              description String?  @db.Text
                price       Decimal  @db.Decimal(10, 2)
                  duration    Int      // minutes
                    
                      // Status
                        active      Boolean  @default(true)
                          order       Int      @default(0)
                            
                              // Timestamps
                                createdAt   DateTime @default(now())
                                  updatedAt   DateTime @updatedAt
                                    
                                      // Relations
                                        business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
                                          appointments Appointment[]
                                            
                                              @@index([businessId])
                                                @@index([active])
                                                  @@map("services")
}

// ============================================
// APPOINTMENT MODELS (Placeholder - will expand in Milestone 7)
// ============================================

enum AppointmentStatus {
    PENDING
      CONFIRMED
        COMPLETED
          CANCELLED
            NO_SHOW
}

model Appointment {
    id          String   @id @default(cuid())
      businessId  String
        serviceId   String
          customerId  String
            
              // Time
                startTime   DateTime
                  endTime     DateTime
                    
                      // Status
                        status      AppointmentStatus @default(PENDING)
                          
                            // Notes
                              notes       String?  @db.Text
                                cancellationReason String?
                                  
                                    // Timestamps
                                      createdAt   DateTime @default(now())
                                        updatedAt   DateTime @updatedAt
                                          
                                            // Relations
                                              business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
                                                service     Service @relation(fields: [serviceId], references: [id], onDelete: Restrict)
                                                  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Restrict)
                                                    
                                                      @@index([businessId])
                                                        @@index([serviceId])
                                                          @@index([customerId])
                                                            @@index([startTime])
                                                              @@index([status])
                                                                @@map("appointments")
}

// ============================================
// CUSTOMER MODELS (Placeholder - will expand in Milestone 11)
// ============================================

model Customer {
    id          String   @id @default(cuid())
      businessId  String
        
          // Contact info
            email       String
              name        String
                phone       String?
                  
                    // Additional info
                      notes       String?  @db.Text
                        tags        String[]
                          
                            // Timestamps
                              createdAt   DateTime @default(now())
                                updatedAt   DateTime @updatedAt
                                  
                                    // Relations
                                      business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
                                        appointments Appointment[]
                                          
                                            @@unique([businessId, email])
                                              @@index([businessId])
                                                @@index([email])
                                                  @@map("customers")
}
