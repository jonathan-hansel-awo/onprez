generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// USER & AUTHENTICATION MODELS
// ============================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  emailVerified Boolean @default(false)
  passwordHash String
  
  // Security fields
  mfaEnabled Boolean @default(false)
  accountLocked Boolean @default(false)
  failedLoginAttempts Int @default(0)
  lastFailedLogin DateTime?
  lockedUntil DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  sessions Session[]
  authAttempts AuthAttempt[]
  passwordResetTokens PasswordResetToken[]
  emailVerificationTokens EmailVerificationToken[]
  mfaSecrets MfaSecret[]
  mfaBackupCodes MfaBackupCode[]
  securityLogs SecurityLog[]
  businesses Business[]
  
  @@index([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  refreshToken String? @unique
  
  // Device information
  deviceInfo String?
  ipAddress  String?
  userAgent  String?
  
  // Session management
  expiresAt DateTime
  lastActivityAt DateTime @default(now())
  isActive Boolean @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("sessions")
}

model AuthAttempt {
  id        String   @id @default(cuid())
  userId    String?  // Null if user not found
  email     String
  
  // Attempt details
  success   Boolean
  ipAddress String
  userAgent String?
  attemptType String // 'login', 'mfa', 'password_reset'
  failureReason String? // 'invalid_password', 'account_locked', 'invalid_mfa'
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([email])
  @@index([ipAddress])
  @@index([createdAt])
  @@map("auth_attempts")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  
  // Token management
  expiresAt DateTime
  usedAt    DateTime?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  email     String   // Email to verify
  
  // Token management
  expiresAt DateTime
  verifiedAt DateTime?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model MfaSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  
  // TOTP secret (encrypted)
  secret    String
  
  // Status
  isActive  Boolean  @default(true)
  verifiedAt DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("mfa_secrets")
}

model MfaBackupCode {
  id        String   @id @default(cuid())
  userId    String
  
  // Code (hashed)
  code      String
  
  // Status
  usedAt    DateTime?
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@map("mfa_backup_codes")
}

model SecurityLog {
  id        String   @id @default(cuid())
  userId    String?  // Null for system-wide events
  
  // Event details
  action    String   // 'login', 'logout', 'password_change', 'mfa_enabled', etc.
  details   Json?    // Additional context
  ipAddress String
  userAgent String?
  
  // Status
  severity  String   // 'info', 'warning', 'error', 'critical'
  
  // Timestamp
  createdAt DateTime @default(now())
  
  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([action])
  @@index([severity])
  @@index([createdAt])
  @@map("security_logs")
}

// ============================================
// RATE LIMITING
// ============================================

model RateLimit {
  id        String   @id @default(cuid())
  
  // Rate limit identifier
  key       String   // IP address, user ID, or custom identifier
  
  // Endpoint/action being rate limited
  endpoint  String   // e.g., '/api/auth/login', 'signup', 'booking'
  
  // Counter and window
  count     Int      @default(0)
  windowStart DateTime @default(now())
  expiresAt DateTime
  
  // Metadata
  userAgent String?
  metadata  Json?    // Additional context
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([key, endpoint])
  @@index([key])
  @@index([endpoint])
  @@index([expiresAt])
  @@map("rate_limits")
}

// ============================================
// RATE LIMIT CONFIGURATION (Optional - for storing configs in DB)
// ============================================

model RateLimitConfig {
  id        String   @id @default(cuid())
  
  // Configuration
  endpoint  String   @unique
  maxAttempts Int     // Maximum attempts allowed
  windowMs  Int      // Time window in milliseconds
  
  // Action on limit exceeded
  blockDurationMs Int? // How long to block after limit exceeded
  
  // Status
  isActive  Boolean  @default(true)
  
  // Description
  description String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([endpoint])
  @@index([isActive])
  @@map("rate_limit_configs")
}

// ============================================
// BUSINESS/PROFILE MODELS
// ============================================

enum BusinessCategory {
    SALON
      BARBERSHOP
        SPA
          MASSAGE
            NAILS
              BEAUTY
                FITNESS
                  YOGA
                    PERSONAL_TRAINING
                      THERAPY
                        COUNSELING
                          TUTORING
                            CONSULTING
                              PHOTOGRAPHY
                                VIDEOGRAPHY
                                  EVENT_PLANNING
                                    CATERING
                                      CLEANING
                                        HOME_SERVICES
                                          PET_SERVICES
                                            OTHER
}

model Business {
    id        String   @id @default(cuid())
      ownerId   String
        
          // Basic Information
            name      String
              slug      String   @unique // For onprez.com/[slug]
                category  BusinessCategory
                  description String?  @db.Text
                    tagline   String?
                      
                        // Contact Information
                          email     String?
                            phone     String?
                              website   String?
                                address   String?
                                  city      String?
                                    state     String?
                                      zipCode   String?
                                        country   String?  @default("US")
                                          
                                            // Location
                                              latitude  Float?
                                                longitude Float?
                                                  timezone  String   @default("America/New_York")
                                                    
                                                      // Media
                                                        logoUrl   String?
                                                          coverImageUrl String?
                                                            
                                                              // Social Links (stored as JSON)
                                                                socialLinks Json?  // { instagram, facebook, twitter, linkedin, tiktok }
                                                                  
                                                                    // Settings (stored as JSON)
                                                                      settings  Json?    // Business configuration
                                                                        
                                                                          // Branding (stored as JSON)
                                                                            branding  Json?    // { primaryColor, secondaryColor, accentColor, fontFamily }
                                                                              
                                                                                // Status
                                                                                  isPublished Boolean @default(false)
                                                                                    isPremium   Boolean @default(false)
                                                                                      isActive    Boolean @default(true)
                                                                                        
                                                                                          // SEO
                                                                                            seoTitle       String?
                                                                                              seoDescription String?
                                                                                                seoKeywords    String[]
                                                                                                  
                                                                                                    // Timestamps
                                                                                                      createdAt DateTime @default(now())
                                                                                                        updatedAt DateTime @updatedAt
                                                                                                          publishedAt DateTime?
                                                                                                            
                                                                                                              // Relations
                                                                                                                owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
                                                                                                                  services Service[]
                                                                                                                    appointments Appointment[]
                                                                                                                      customers Customer[]
                                                                                                                        businessHours BusinessHours[]
                                                                                                                        serviceCategories ServiceCategory[] 
                                                                                                                        reviews Review[]
                                                                                                                          
                                                                                                                            @@index([ownerId])
                                                                                                                              @@index([slug])
                                                                                                                                @@index([category])
                                                                                                                                  @@index([isPublished])
                                                                                                                                    @@index([city, state])
                                                                                                                                      @@map("businesses")
}

model BusinessHours {
    id         String   @id @default(cuid())
      businessId String
        
          // Day of week (0 = Sunday, 6 = Saturday)
            dayOfWeek  Int      // 0-6
              
                // Time slots
                  openTime   String   // "09:00"
                    closeTime  String   // "17:00"
                      
                        // Status
                          isClosed   Boolean  @default(false)
                            
                              // Special notes
                                notes      String?
                                  
                                    // Timestamps
                                      createdAt DateTime @default(now())
                                        updatedAt DateTime @updatedAt
                                          
                                            // Relations
                                              business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
                                                
                                                  @@unique([businessId, dayOfWeek])
                                                    @@index([businessId])
                                                      @@map("business_hours")
}

// ============================================
// SERVICE MODELS
// ============================================

model Service {
  id          String   @id @default(cuid())
  businessId  String
  
  // Basic information
  name        String
  description String?  @db.Text
  tagline     String?  // Short one-liner
  
  // Pricing
  price       Decimal  @db.Decimal(10, 2)
  priceType   PriceType @default(FIXED)
  priceRangeMin Decimal? @db.Decimal(10, 2)
  priceRangeMax Decimal? @db.Decimal(10, 2)
  currency    String   @default("USD")
  
  // Duration
  duration    Int      // minutes
  bufferTime  Int      @default(0) // minutes after appointment
  
  // Category
  categoryId  String?
  category    ServiceCategory? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  // Media
  imageUrl    String?
  galleryImages String[] // Array of image URLs
  
  // Booking settings
  requiresApproval Boolean @default(false)
  requiresDeposit  Boolean @default(false)
  depositAmount    Decimal? @db.Decimal(10, 2)
  maxAdvanceBookingDays Int? // Override business default
  
  // Display
  featured    Boolean  @default(false)
  active      Boolean  @default(true)
  order       Int      @default(0)
  
  // SEO
  seoTitle       String?
  seoDescription String?
  
  // Additional info
  preparationNotes String? @db.Text // What customer should know
  aftercareNotes   String? @db.Text // Post-service instructions
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  
  @@index([businessId])
  @@index([categoryId])
  @@index([active])
  @@index([featured])
  @@index([order])
  @@map("services")
}

enum PriceType {
  FIXED       // Exact price: £50
  RANGE       // Price range: £50-£80
  STARTING_AT // Starting at: From £50
  FREE        // Free service
}

model ServiceCategory {
  id          String   @id @default(cuid())
  businessId  String
  
  // Category info
  name        String
  description String?
  order       Int      @default(0)
  
  // Display
  color       String?  // Hex color for UI
  icon        String?  // Icon name or emoji
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  services    Service[]
  
  @@unique([businessId, name])
  @@index([businessId])
  @@map("service_categories")
}

// ============================================
// APPOINTMENT MODELS
// ============================================

enum AppointmentStatus {
  PENDING       // Awaiting confirmation
  CONFIRMED     // Confirmed by business
  COMPLETED     // Service completed
  CANCELLED     // Cancelled by customer or business
  NO_SHOW       // Customer didn't show up
  RESCHEDULED   // Moved to different time
}

enum CancellationSource {
  CUSTOMER
  BUSINESS
  SYSTEM
}

model Appointment {
  id          String   @id @default(cuid())
  businessId  String
  serviceId   String
  customerId  String
  
  // Time scheduling
  startTime   DateTime
  endTime     DateTime
  duration    Int      // minutes (from service)
  timezone    String   // Customer's timezone
  
  // Status tracking
  status      AppointmentStatus @default(PENDING)
  previousStatus AppointmentStatus? // For tracking status changes
  
  // Confirmation
  confirmedAt DateTime?
  confirmedBy String?  // User ID who confirmed
  
  // Completion
  completedAt DateTime?
  
  // Cancellation
  cancelledAt DateTime?
  cancellationSource CancellationSource?
  cancellationReason String? @db.Text
  cancelledBy String? // User ID or customer ID
  
  // Rescheduling
  rescheduledFrom String? // Original appointment ID
  rescheduledTo   String? // New appointment ID
  rescheduledAt   DateTime?
  rescheduleReason String? @db.Text
  
  // Customer information
  customerName  String
  customerEmail String
  customerPhone String?
  
  // Notes
  customerNotes String? @db.Text // Notes from customer
  businessNotes String? @db.Text // Private notes from business
  
  // Payment tracking (basic)
  requiresDeposit Boolean @default(false)
  depositAmount   Decimal? @db.Decimal(10, 2)
  depositPaid     Boolean @default(false)
  depositPaidAt   DateTime?
  totalAmount     Decimal @db.Decimal(10, 2)
  paymentStatus   PaymentStatus @default(UNPAID)
  paidAt          DateTime?
  
  // Reminders
  reminderSentAt  DateTime?
  reminderCount   Int @default(0)
  
  // Booking source
  bookingSource   String? // 'website', 'admin', 'api', 'phone'
  bookingIp       String? // IP address of booking
  
  // Metadata
  metadata        Json? // Flexible additional data
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  service     Service @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Restrict)
  
  @@index([businessId])
  @@index([serviceId])
  @@index([customerId])
  @@index([startTime])
  @@index([status])
  @@index([customerEmail])
  @@index([createdAt])
  @@map("appointments")
}

enum PaymentStatus {
  UNPAID
  PARTIALLY_PAID
  PAID
  REFUNDED
  FAILED
}

// ============================================
// CUSTOMER MODELS
// ============================================

model Customer {
  id          String   @id @default(cuid())
  businessId  String
  
  // Contact information
  email       String
  name        String
  firstName   String?
  lastName    String?
  phone       String?
  
  // Additional contact
  alternatePhone String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?  @default("US")
  
  // Customer profile
  birthday    DateTime? // For birthday reminders/promotions
  gender      String?
  preferredLanguage String? @default("en")
  
  // Preferences
  preferences Json?    // Flexible preferences storage
  
  // Communication preferences
  emailOptIn  Boolean  @default(true)
  smsOptIn    Boolean  @default(false)
  marketingOptIn Boolean @default(false)
  
  // Organization
  tags        String[] // For segmentation
  customFields Json?   // Business-specific custom fields
  
  // Customer notes
  notes       String?  @db.Text
  privateNotes String? @db.Text // Only visible to business
  
  // Status
  isVip       Boolean  @default(false)
  isBlocked   Boolean  @default(false)
  blockReason String?
  
  // Statistics (calculated/cached)
  totalBookings    Int      @default(0)
  completedBookings Int     @default(0)
  cancelledBookings Int     @default(0)
  noShowCount      Int      @default(0)
  totalSpent       Decimal  @default(0) @db.Decimal(10, 2)
  averageRating    Decimal? @db.Decimal(3, 2)
  
  // Engagement tracking
  firstBookingAt   DateTime?
  lastBookingAt    DateTime?
  lastContactedAt  DateTime?
  
  // Source tracking
  source      String?  // How they found the business
  referredBy  String?  // Referral source
  
  // Metadata
  metadata    Json?    // Additional flexible data
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  reviews     Review[]
  
  @@unique([businessId, email])
  @@index([businessId])
  @@index([email])
  @@index([phone])
  @@index([tags])
  @@index([isVip])
  @@index([lastBookingAt])
  @@map("customers")
}

// ============================================
// REVIEW MODEL (Basic placeholder for future)
// ============================================

model Review {
  id          String   @id @default(cuid())
  businessId  String
  customerId  String
  appointmentId String?
  
  // Review content
  rating      Int      // 1-5 stars
  title       String?
  comment     String?  @db.Text
  
  // Status
  isPublished Boolean  @default(false)
  isVerified  Boolean  @default(false)
  
  // Response
  businessResponse String? @db.Text
  respondedAt      DateTime?
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  
  @@index([businessId])
  @@index([customerId])
  @@index([rating])
  @@index([isPublished])
  @@map("reviews")
}